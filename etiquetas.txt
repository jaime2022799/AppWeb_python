python 

BFILENAME('DIR_ARCHIVO_COTIZADOR',)

#@app.route('/login.html', methods=['GET'])
#def data():
#    cur = connection.cursor()
#    cur.execute('select * from signup')
#    rv = cur.fetchall()
    #for row in rv:
    #    print(rv)
#    cur.close

#    return redirect(url_for('post_data'))

 <!--div id="galeria" class="galeria">
            <h3 class="btn btn-dark" style="width: 15%; position: relative; bottom: 420px; margin-left: 37%; right: 370px;">Eventos</h3>
            <div class="card" id="tarjeta">
                <img src="{{ url_for('static', filename='img/galeria2.png') }}" id="foto" class="card-img-top" alt="...">
                <div class="card-body">
                  <h5 class="card-title">Evento Simple</h5>
                  <p class="card-text">Some quick example text to build on the card title and make up the bulk of the card's content.</p>
                  <a href="#tipo_evento" value="" id="Agendar" class="btn btn-primary">Agendar</a>
                  <a href="#foto" value="" onclick="mostrar();" style="width: 100px; margin-left: 25%; " class="btn btn-danger">Ver</a>
                  
                </div>
                
            </div>
            <div class="card" id="tarjeta-3">
                <img src="{{ url_for('static', filename='img/galeria2.png') }}" id="foto1" class="card-img-top" alt="...">
                <div class="card-body">
                  <h5 class="card-title">Evento Premiun</h5>
                  <p class="card-text">Some quick example text to build on the card title and make up the bulk of the card's content.</p>
                  <a href="#tipo_evento" value="" id="Agendar" class="btn btn-primary">Agendar</a>
                  <a href="#foto1" value="" onclick="mostrar();" style="width: 100px; margin-left: 25%;" class="btn btn-danger">Ver</a>
                </div>
            </div>

            <div class="card" id="tarjeta-2">
                <img src="{{ url_for('static', filename='img/galeria2.png') }}" id="foto2" class="card-img-top" alt="...">
                <div class="card-body">
                  <h5 class="card-title">Evento Personalizado</h5>
                  <p class="card-text">Some quick example text to build on the card title and make up the bulk of the card's content.</p>
                  <a href="#tipo_evento" value="" id="Agendar" class="btn btn-primary">Agendar</a>
                  <a href="#foto2" value="" onclick="mostrar();" style="width: 100px; margin-left: 25%;" class="btn btn-danger">Ver</a>
                </div>
            </div>

            <div class="card" id="tarjeta-4">
                <img src="{{ url_for('static', filename='img/galeria2.png') }}" id="foto3" class="card-img-top" alt="...">
                <div class="card-body">
                  <h5 class="card-title">Evento Gold</h5>
                  <p class="card-text">Some quick example text to build on the card title and make up the bulk of the card's content.</p>
                  <a href="#tipo_evento" value="" id="Agendar" class="btn btn-primary">Agendar</a>
                  <a href="#foto3" value="" onclick="mostrar();" style="width: 100px; margin-left: 25%;" class="btn btn-danger">Ver</a>
                </div>
            </div>
        </div-->

#definimos la ruta de login para los parametros de la creacion de la cuenta signup
#@app.route('/login.html', methods=['POST'])
#def signup_registro():

#    fecha = date.today()
 #   fechaHora = datetime.now()
 #   time = fechaHora.strftime("%H:%M:%S")


     # Extract the employee data from the request
 #   req = request.get_json
 #   nombre = req['nombre']
#    email = req['email']
#    password_create = req['password_create']
  #  password_confirm = req['password_confirm']
 #   apellido = req['apellido']

    # Check if the employee with the same ID already exists
    

    # Insert the employee into the database
 #   cursor.execute("INSERT INTO SIGNUP (email, clave_nueva, clave, fecha , nombre , apellido , hora) VALUES (:email, :password_create, :password_confirm,:fecha, :nombre,:apellido,:time)",
 ##               {'email': email, 'password_create': password_create, 'password_confirm': password_confirm, 'fecha':fecha, 'nombre':nombre, 'apellido':apellido, 'time':time})
 #   connection.commit()
    #llamamos al request del metodo post 
  
 #   return redirect(url_for('data'))


html
  <button class="button_login" id="form-open">Login</button>

.form_container {
    position: absolute;
    max-width: 320px;
    width: 100%;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%) scale(1.2);
    z-index: 101;
    background-color: #fff;
    padding: 25px;
    border-radius: 12px;
    box-shadow: rgba(0, 0, 0, 0.1);
    opacity: 0;
    pointer-events: none;
    transition: all 0.4s ease-out;
   
}

css
.button_login {
    padding: 6px 24px;
    border: 2px solid #fff;
    background: transparent;
    border-radius: 6px;
    margin-left: 250px;
    cursor: pointer;

}
.button_login:active {
    transform: scale(0.98);
}

html
<!--div class="field">
                      <label for="filename">filename</label>
                      <input type="text" name="filename" id="filename">
                    </div>
                    <div class="field">
                      <label for="reply_to">reply_to</label>
                      <input type="text" name="reply_to" id="reply_to">
                    </div-->

<!--form  id="csv-upload-form" class="dropzone"> 
                    <div class="dropzone" id="tabla"> 
                        <div class="dz-message" id="titulo_archivo"> 
                            <img src="{{ url_for('static', filename='img/upload.png')}}" class="img_upload">
                        </div> 
                    </div> 
                </form-->


 <!--div class="dropzone" id="tabla" type="file"> 
                        <div class="dz-message" id="titulo_archivo"> 
                            <img src="{{ url_for('static', filename='img/upload.png')}}" class="img_upload">
                        </div> 
                    </div--> 



/*
import {blobToBase64} from './blobManager.js';

const excel_send = document.getElementById('enviar');

const input = document.getElementById('tabla');

var swalbuton = document.getElementsByClassName('swal-button swal-button--confirm');

excel_send.addEventListener('click', async (e) =>{
   e.preventDefault();
   
   //inicializacion base64 de archivo xlsx
  //  const myBlob = input.files[0];
  const byBlob = input.files[0];
   const byB64 = await blobToBase64(byBlob)
   console.log(byB64)
   //enviar email cliente con archivo adjuntado
   Email.send({
      SecureToken : "82355aea-cf83-4bc2-8d5a-449866654c56",
      To : 'jaimeretamal47@gmail.com',
      From : "jaimeretamal47@gmail.com",
      Subject : "Cotizacion EventsBussynes",
      Body : "Estimado(a) esto es una validacion de redireccionamiento de archivo",

      
      Attachments : [
         {
            name : "CotizacionJaime.xlsx",
            data :  byB64
            
         }]
      
   }).then(

      message => swal('Genial...','se a enviado una notificacion de su cotizacion a la contadora correspondiente.','success')
      
   );
   
 
   
  e.preventDefault();
});

*/


   /*
   emailjs.sendForm(serviceID, templateID, this, blobToBase64)
    .then(() => {
      
      enviar_excel.value = 'Enviar';
      alert('Se a enviado el archivo!');
    }, (err) => {
      enviar_excel.value = 'Enviar';
      alert(JSON.stringify(err));
    });
   */

   /*
   const blobToBase64 = (file) => {
      return new Promise((resolve, reject) => {
          const reader = new FileReader();
          reader.readAsDataURL(file);
          reader.onloadend = () => {
              resolve(reader.result.split(',')[1]);
          };
      });
  };
  */
 
  //enviar email cliente con archivo adjuntado
  /*
  Email.send({
     SecureToken : "410aa0a-7fb9-4f89-9bfe-4c6469698d71",
     To : 'jaimeretamal47@gmail.com',
     From : "jaimeretamal47@gmail.com",
     Subject : "Cotizacion EventsBussynes",
     Body : "Estimado(a) esto es una validacion de redireccionamiento de archivo",

     
     Attachments : [
        {
           name : "CotizacionJaime.xlsx",
           data :  byB64
           
        }]
     
  }).then(

     message => swal('Genial...','se a enviado una notificacion de su cotizacion a la contadora correspondiente.','success')
     
  );
  */
/*
document.getElementById('form')
.addEventListener('submit', function(event) {
   event.preventDefault();

   btn.value = 'enviando...';

   const serviceID = 'default_service';
   const templateID = 'template_lmdided';


#INSERTAR_REGISTRO_SIGNUP = '''
#INSERT INTO SIGNUP (ID_SIGNUP,EMAIL,CLAVE_NUEVA,CLAVE,NOMBRE,APELLIDO) VALUES (8,'RETAMAL2024@GMAIL.COM','RETAMAL','RETAMAL','JAIME','MENDOZA')
#'''

 email_r = cursor.var(str)
    clave_nueva_r = cursor.var(str)
    clave_r = cursor.var(str)
    nombre_r = cursor.var(str)
    apellido_r = cursor.var(str)

  #delete_tabla = '''
    #DELETE FROM SIGNUP WHERE ID_SIGNUP IN (104,111,112,113,114)
    #'''
    
   # cursor.execute(delete_tabla)
    #query = 'select * from signup'
    

    #INSERT INTO SIGNUP (ID_SIGNUP,EMAIL,CLAVE_NUEVA,CLAVE,NOMBRE,APELLIDO) VALUES (8,'RETAMAL2024@GMAIL.COM','RETAMAL','RETAMAL','JAIME','MENDOZA')
        #call_sp_signup = '''
        #INSERT INTO SIGNUP (EMAIL,CLAVE_NUEVA,CLAVE,FECHA,NOMBRE,APELLIDO) VALUES (:email,:clave_nueva,:clave,:fecha,:nombre,:apellido)
        #'''


@app.route('/login.html', methods=['GET'])
def get_id_signup():
    cur = connection.cursor()
    cur.execute("SELECT * FROM SIGNUP")
    registro = cur.fetchall()

    registro_lista = []
    for registros in registro:
        registro_lista.append({
            'id_signup': registros[0],
            'email': registros[1],
            'clave_nueva': registros[2],
            'clave': registros[3],
            'fecha': registros[4],
            'nombre': registros[5],
            'apellido': registros[6],
            'time': registros[7]
        })
        print(0)
    #if registro is None:
     #   return jsonify({'message': 'registro no encontrado'}), 404


    return jsonify(registro_lista)
 <div class="navbar-collapse collapse">
                    <ul class="navbar-nav ms-auto">
                        <li class="nav-item dropdown">
                            <!--a href="#" class="nav-icon pe-md-0" data-bs-toggle="dropzone">
                                <img src="/static/img/cuenta.png"  class="avatar img-fluid"  alt="">

                            </a-->
                            
                            
                            <div class="dropdown-menu dropdown-menu-end rounded">
                                <a href="#" class="dropdown-item">
                                    <?xml version="1.0" encoding="utf-8"?>
                                   
                                    <svg fill="#1C2033" width="52" height="52" version="1.1" id="lni_lni-alarmclock" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px"
                                        y="0px" viewBox="0 0 64 64" style="enable-background:new 0 0 64 64;" xml:space="preserve">
                                    <g>
                                        <path d="M43.4,34.8h-9.1v-9.3c0-1.2-1-2.3-2.3-2.3c-1.2,0-2.3,1-2.3,2.3v9.3h-0.3c-1.2,0-2.3,1-2.3,2.3s1,2.3,2.3,2.3h0.3v0.3
                                            c0,1.2,1,2.3,2.3,2.3c1.2,0,2.3-1,2.3-2.3v-0.3h9.1c1.2,0,2.3-1,2.3-2.3S44.6,34.8,43.4,34.8z"/>
                                        <path d="M59.5,19.1c0-5.5-4.4-9.9-9.9-9.9c-2.6,0-5,1-6.8,2.7c-2.7-1.2-5.5-2-8.6-2.2V6.3h2.8c1.2,0,2.3-1,2.3-2.3s-1-2.3-2.3-2.3
                                            H26.9c-1.2,0-2.3,1-2.3,2.3s1,2.3,2.3,2.3h2.8v3.5c-3,0.3-5.9,1-8.6,2.2c-1.8-1.7-4.2-2.7-6.8-2.7c-5.5,0-9.9,4.4-9.9,9.9
                                            c0,2.7,1.1,5.3,3.1,7.1c-1.2,3-1.9,6.3-1.9,9.7c0,14.5,11.8,26.3,26.3,26.3s26.3-11.8,26.3-26.3c0-3.4-0.7-6.7-1.9-9.7
                                            C58.4,24.4,59.5,21.8,59.5,19.1z M49.6,13.7c3,0,5.4,2.4,5.4,5.4c0,1-0.3,2-0.8,2.8c-1.9-3-4.3-5.5-7.2-7.5
                                            C47.8,13.9,48.7,13.7,49.6,13.7z M9,19.1c0-3,2.4-5.4,5.4-5.4c0.9,0,1.8,0.2,2.6,0.7c-2.9,2-5.3,4.6-7.2,7.5C9.3,21,9,20.1,9,19.1z
                                            M32,57.8c-12,0-21.8-9.8-21.8-21.8c0-12,9.8-21.8,21.8-21.8s21.8,9.8,21.8,21.8C53.8,48,44,57.8,32,57.8z"/>
                                    </g>
                                    </svg>
                                    <span>Analitica</span>
                                </a>
                                <a href="#" class="dropdown-item">
                                    <?xml version="1.0" encoding="utf-8"?>
                                    <svg fill="#1C2033" width="52" height="52" version="1.1" id="lni_lni-zoom-out" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px"
                                        y="0px" viewBox="0 0 64 64" style="enable-background:new 0 0 64 64;" xml:space="preserve">
                                    <g>
                                        <path d="M61,51L46.7,36.7c-1.6-1.6-4.3-1.6-5.9,0l-0.4,0.4l-2.8-2.8c2.8-3.5,4.4-7.9,4.4-12.5c0-5.4-2.1-10.4-5.9-14.2
                                            c-7.8-7.8-20.6-7.8-28.4,0c-3.8,3.8-5.9,8.8-5.9,14.2c0,5.4,2.1,10.4,5.9,14.2c3.9,3.9,9.1,5.9,14.2,5.9c4.4,0,8.9-1.5,12.5-4.4
                                            l2.8,2.8l-0.4,0.4c-0.8,0.8-1.2,1.8-1.2,3c0,1.1,0.4,2.2,1.2,3L51.1,61c0.8,0.8,1.9,1.2,3,1.2s2.1-0.4,3-1.2l4-4v0
                                            c0.8-0.8,1.2-1.8,1.2-3C62.3,52.9,61.8,51.8,61,51z M10.8,32.9c-2.9-2.9-4.6-6.8-4.6-11c0-4.2,1.6-8.1,4.6-11c3-3,7-4.6,11-4.6
                                            c4,0,8,1.5,11,4.6c2.9,2.9,4.6,6.8,4.6,11c0,4.2-1.6,8.1-4.6,11C26.8,38.9,16.9,38.9,10.8,32.9z M54,57.6L40.1,43.7l3.6-3.6
                                            L57.6,54L54,57.6z"/>
                                        <path d="M26.9,19.6H16.7c-1.2,0-2.3,1-2.3,2.3s1,2.3,2.3,2.3h10.2c1.2,0,2.3-1,2.3-2.3S28.2,19.6,26.9,19.6z"/>
                                    </g>
                                    </svg>
                                    <span>Configuracion</span>
                                </a>

                                <div class="dropdown-divider">
                                    <a href="#" class="dropdown-item">
                                            <?xml version="1.0" encoding="utf-8"?>
                                            <svg fill="#1C2033" width="52" height="52" version="1.1" id="lni_lni-question-circle" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
                                                x="0px" y="0px" viewBox="0 0 64 64" style="enable-background:new 0 0 64 64;" xml:space="preserve">
                                            <g>
                                                <path d="M32,1.8C15.3,1.8,1.8,15.3,1.8,32S15.3,62.3,32,62.3S62.3,48.7,62.3,32S48.7,1.8,32,1.8z M32,57.8
                                                    C17.8,57.8,6.3,46.2,6.3,32C6.3,17.8,17.8,6.3,32,6.3c14.2,0,25.8,11.6,25.8,25.8C57.8,46.2,46.2,57.8,32,57.8z"/>
                                                <path d="M33.8,12.1c-2.9-0.5-5.9,0.3-8.1,2.2c-2.2,1.9-3.5,4.6-3.5,7.6c0,1.1,0.2,2.2,0.6,3.3c0.4,1.2,1.7,1.8,2.9,1.4
                                                    c1.2-0.4,1.8-1.7,1.4-2.9c-0.2-0.6-0.3-1.2-0.3-1.8c0-1.6,0.7-3.1,1.9-4.1c1.2-1,2.8-1.5,4.5-1.2c2.1,0.4,3.9,2.2,4.3,4.3
                                                    c0.4,2.5-0.9,5-3.2,6c-2.6,1.1-4.3,3.7-4.3,6.7v6.2c0,1.2,1,2.3,2.3,2.3c1.2,0,2.3-1,2.3-2.3v-6.2c0-1.1,0.6-2.1,1.5-2.5
                                                    c4.3-1.8,6.8-6.3,6-10.9C41,16.1,37.8,12.8,33.8,12.1z"/>
                                                <path d="M32.1,45.8h-0.3c-1.2,0-2.3,1-2.3,2.3s1,2.3,2.3,2.3h0.3c1.2,0,2.2-1,2.2-2.3S33.4,45.8,32.1,45.8z"/>
                                            </g>
                                            </svg>
                                        <span>Analitica</span>
                                    </a>
                                </div>
                            </div>

                        </li>
                    </ul>
                    
                </div>




call INSERTAR_REGISTRO_LOGIN (8,'nicolasmendoza@gmail.com','mendoza',15)

call REGISTRO_CON_VALIDACION_LOGIN (id_login,email_login,clave_login,id_signup,fecha)'

#cursor.execute(INSERTAR_REGISTRO_SIGNUP)
#connection.commit()
#def get_usuario_id(nombre_id):
 #   with connection.cursor() as cursor:
  #      rows_count = cursor.execute(get_usuario_id(nombre_id))
   #     if rows_count == 0:
    #        return jsonify('no se encuentra usuario '+ nombre_id),404
     #   else:
      #      return jsonify(cursor.fetchone()), 200


#insertar_usuario= '''
#INSERT INTO SIGNUP (ID_SIGNUP,EMAIL,CLAVE_NUEVA,CLAVE,NOMBRE,APELLIDO) VALUES (10,'ISAK@GMAIL.COM','ISAK','DOKU','ISAK','DOKU')
#       '''

# cursor.execute("""
    #        insert into signup (email,password_create,password_confirm,fecha,nombre,apellido)
     #       values (:email_r,:clave_nueva_r,:clave_r,:fecha,:nombre_r,:apellido_r)
     #       returning  email into :email_r,password_create into :clave_nueva_r 
     #       password_confirm into clave_r, fecha into :fecha , nombre into :nombre_r , apellido into apellido_r""", 
     #      [email, email_r,password_create,clave_nueva_r,password_confirm,clave_r,fecha,nombre,nombre_r,apellido,apellido_r])
   # return 'Inserted {} with email {}'.format(email, email_r.getvalue()[0]), 'Inserted {} with password_create {}'.format(password_create, clave_nueva_r.getvalue()[0]),'Inserted {} with password_confirm {}'.format(clave_r.getvalue()[0]),'Inserted {} with fecha {}'.format(fecha.getvalue()[0]),'Inserted {} with nombre {}'.format(nombre.getvalue()[0]),'Inserted {} with apellido {}'.format(apellido.getvalue()[0])
        
        #cursor.execute(call_sp_signup,[email_r,password_create,password_confirm,fecha,nombre,apellido])
        #return render_template('/index.html')
        #return redirect(url_for('/home'))
    #else:

   emailjs.sendForm(serviceID, templateID, this)
    .then(() => {

      btn.value = 'Enviar';
      alert('Se a enviado el archivo!');
    }, (err) => {
      btn.value = 'Enviar';
      alert(JSON.stringify(err));
    });
    
});
*/

/*"data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;base64,"*/

/*enviar_excel.addEventListener('submit', (e) =>{
   e.preventDefault();
   
   //inicializacion base64 de archivo xlsx
 // console.log(fileUpload.innerText);
 // console.log("convertiendo base 64 ....");
  
  //const myBlob = fileUpload.files[0];
  //const myB64 = await blobToBase64(myBlob);
  //console.log(myB64);
  
   //enviar email cliente con archivo adjuntado
   Email.send({
      SecureToken : "7542a-a621-44a3-8521-0807c735763",
      To : 'jaimeretamal47@gmail.com',
      From : "jaimeretamal47@gmail.com",
      Subject : "EventosDeNegocio",
      Body : "estimado(a) esperando que se encuentre bien , le adjuntamos la cotizacion correspondiente a su solicitud."
  }).then(
    message => alert(message)
  );
   
 
   
  //e.preventDefault();
  
});
*/
//document.getElementById('form').

header.down{
  background: #22222b;
  padding: 25px 80px;
  position: sticky;
  top: 0;
 }

/*tabla_file.addEventListener("change", e => {
      const file = tabla_file.files[0];

      reader.addEventListener("load", () => {
         console.log(reader.result);
      });

      reader.readAsDataURL(file);
   });*/
   

  // reader.readAsDataURL(cargarimagen);
  // reader.readAsDataURL(tabla_file.files[0]);
   
  // reader.readAsText(tabla_file.files[0])

<a href="https://wa.me/56931333274"><img src="{{url_for('static', filename='img/whatsapp-fill.png')}}" style="width: 50px; height: 50px; margin-left: 1700px; position: relative; "></a>
<a href="https://facebook.com"><img src="{{url_for('static', filename='img/facebook-fill.png')}}" style="width: 50px; height: 50px; margin-left: 1700px; position: relative; "></a>
<a href="https://twitter.com/?lang=es"><img src="{{url_for('static', filename='img/twitter-fill (1).png')}} " style="width: 50px; height: 50px; margin-left: 1700px; position: relative;"></a>
<a href="https://instagram.com"><img src="{{url_for('static', filename='img/instagram-fill.png')}} " style="width: 50px; height: 50px; margin-left: 1700px; position: relative;"></a>





<div class="slider">
                
            <div>
                <img src="{{url_for('static', filename='img/slider2.jpg')}}"  class="imagen1" alt="">
                
            </div>

            <div>
                <img src="{{url_for('static', filename='img/slider2.jpg')}}"  class="imagen1" alt="">
                
             </div>

            <div>
                <img src="{{url_for('static', filename='img/slider2.jpg')}}"   class="imagen" alt="">
                
            </div>
        
        </div>





<div class="contenido2">
                <div class="estructura">
                </div>
            </div>

            <div class="contenido3">
                <div class="estructura2">
                </div>
            </div>

            <div class="contenido4">
                <div class="estructura3">
                </div>
            </div>
            
            <div class="contenido5">
                <div class="estructura4">
                </div>
            </div>
https://formsubmit.co/jaimeretamal47@gmail.com

/*export const hello = () =>{
    return "hello";
}
*/

//import {hello} from  './readCsv.js';
//import {excel_file} from './readCsv.js';



/*
function generarPdf(event) {
    event.preventDefault()


    const contenido = document.getElementById('contenido')
    if (contenido.childElementCount === 0) {
        alert("no se puede generar registro ya que no existe registro de los campos de la factura")
    }
}
*/

//var doc = new jsPDF();

//const boton = document.getElementById("boton_verificar");

//boton.addEventListener('click',function(e) {

    /*var elementHTML = document.getElementById('contenido').html();

    var specialElementHandlers = {
        '#elementH': function (e, renderer) {
            return true;
        }
    };

    doc.fromHTML(elementHTML, 15, 15, {
        'width': 170,
        'elementHandlers': specialElementHandlers
    });

    // Save the PDF
    doc.save('sample-document.pdf');


    e.preventDefault();

    */

    /*function generarPdf(event) {
        event.preventDefault()
    
    
        const contenido = document.getElementById('contenido')
        if (contenido.childElementCount === 0) {
            alert("no se puede generar registro ya que no existe registro de los campos de la factura")
        }
    }*/
    //alert("rellena los campos de la factura")

//    e.preventDefault();
//});


/*
function convertHtmltoPdf() {

    const { jsPDF } = window.jspdf;
    
    let doc = new jsPDF('1', 'mm',[1500, 1400]);
    let pdfjs = document.querySelector('#contenido');

    doc.html(pdfjs, {
        callback: function(doc) {
            doc.save("newpdf.pdf");

        },
        x: 12,
        y: 12
    });
}
*/



#@app.route('/registro_titular', method='POST')
#def pag_registro_pago():
     #VARIABLES
#    fecha = date.today()
#    fechaHora = datetime.now()
#    time = fechaHora.strftime("%H:%M:%S")

#    if request.method == 'POST':
         
         # rut = request.form['rut']
         # nombre_titular = request.form['nombre_titular']
         # apellido_titular = request.form['apellido_titular']
         # email_titular = request.form['email_titular']
        #  metodo_de_pago = request.form['metodo_de_pago']
        #  nombre_banco_tarjeta = request.form['metodo_de_pago']
         
        #execute = """
        #    INSERT INTO PAGO_COTIZACION (rut,numero_cuenta,nombre_titular,cvc_titular,fecha,hora) 
            # VALUES (:rut,:nombre_titular,:apellido_titular,:email_titular,:metodo_de_pago,:fecha,:hora,:nombre_banco_tarjeta)       
        #"""
        # cursor.execute(execute, {'rut':rut,'nombre_titular':nombre_titular,'apellido_titular':apellido_titular,'email_titular':email_titular,'metodo_de_pago':metodo_de_pago,'fecha':fecha,'hora':hora,'nombre_banco_tarjeta':nombre_banco_tarjeta})
#        connection.commit()  
        
#    else:
#        return "404 ERROR REQUEST", 400
    
#    return render_template('/login.html'), 200


        """
            if 'archivo' not in request.files:
                flash('no se encuentra archivo')
            archivos = request.files['archivo']
            
            if archivos and allowed_file(archivos.filename):
                filename = secure_filename(archivos.filename)
                archivos.save(os.path.join(app.config['UPLOAD_FOLDER'], filename))
                flash('Files succesfully upload')
        else:
            return '404 bad request' , 400
        """
   
#if request.method == 'POST':
        #f = request.files['archivo']
        #filename = secure_filename(f.filename)
        # Guardamos el archivo en el directorio "Archivos PDF"
        #f.save(os.path.join(app.config['UPLOAD_FOLDER'], filename))
        #return render_template('/index.html'), 200
        # Retornamos una respuesta satisfactoria
        #execute = """
        #    INSERT INTO ARCHIVO_BFILE_COTIZADOR (nombre,fecha,hora,archivo)
        #    VALUES (:nombre,:fecha,:time,:name_file);
        #"""






 #f_archivo = archivos.save(archivos.filename)
        
        #name_file = f_archivo

        #execute = """
        #    INSERT INTO ARCHIVO_BFILE_COTIZADOR (nombre,fecha,hora,archivo)
        #    VALUES (:nombre,:fecha,:time,:name_file);
        #"""
        #cursor.execute(execute, {'nombre':nombre,'fecha':fecha,'time':time,'name_file':name_file})

  for row in cursor.execute("select * from CRUD_ARCHIVO_COTIZACION"):
        

#cur = connection.cursor()
#cur.execute("SELECT * FROM SIGNUP WHERE HORA IS NOT NULL")
#for id_signup , email, clave_nueva , clave,fecha,nombre,apellido,hora in cur:
#    print("Campo: ", id_signup)
#    print("Campo: ", email)
#    print("Campo: ", clave_nueva)
#    print("Campo: ", clave)
#    print("Campo: ", fecha)
#    print("Campo: ", nombre)
#    print("Campo: ", apellido)
#    print("Campo: ", hora)

:tipo_tarjeta,:nombre_tarjeta ,:numero_cuenta,:expiracion,:cvv,

class="needs-validation" novalidate 

//archivo_excel = excel_file.reader(data);


                    <br>
                    <div class="form-group">
                        <input type="text" id="name" name="apellido" class="form-control" placeholder="">
                    </div>
                    <br>
                    <div class="form-group">
                        <input type="text" id="name" name="tipo_evento" class="form-control" placeholder="">
                    </div>
                    <br>
                    <div class="form-group">
                        <input type="text" id="name" name="contacto" class="form-control" placeholder="">
                    </div>
                    <br>
                    <div class="form-group">
                        <input type="text" id="name" name="direccion" class="form-control" placeholder="">
                    </div>
                    <br>
                    <div class="form-group">
                        <input type="text" id="name" name="email" class="form-control" placeholder="">
                    </div>
                    <br>
                    <div class="form-group">
                        <input type="text" id="name" name="fecha" class="form-control" placeholder="">
                    </div>
                    <br>
                    <div class="form-group">
                        <input type="text" id="name" name="hora" class="form-control" placeholder="">
                    </div>
                    
                    <br>
                    <br>


app.config["UPLOAD_FOLDER"] = "static/uploads"
ALLOWED_EXTENSIONS = set(['pdf','xlsx','txt','csv'])

try:
    connection=cx_Oracle.connect(
        user='user_boss',
        password='2024',
        dsn='localhost:1521/ORCL',
        encoding='UTF-8'

    )
except Exception as ex:
        print(ex)

def allowed_file(file):
    file = file.split('.')
    print(file)
    if file[1] in ALLOWED_EXTENSIONS:
        return True
    return False
    
    
@classmethod
def get_by_id(cls, id):

    return cls.query.filter(cls.id == id).first()

@app.route('/login.html')
def signup():
    
    response = make_response("cookie_app")
    response.set_cookie("cookie_app","cookie")
    cookie_value = request.cookies.get("cookie_app")

    return render_template('/login.html')


@app.route('/modulo_formulario_administrativo.html')
def formulario_administrativo():

  
   cursor.execute("select * from formulario_administrativo")
   row = cursor.fetchall()

   return render_template('/modulo_formulario_administrativo.html', row=row)


@app.route('/editUser.html')
def edit_formulario():
   
   #x = cursor.execute("select * from formulario_administrativo")
   cursor.execute("select * from formulario_administrativo")
   row = cursor.fetchall()

   if row:
       
       nombre = request.form['nombre']
       apellido = request.form['apellido']
       tipo_evento = request.form['tipo_evento']
       contacto = request.form['contacto']
       direccion = request.form['direccion']
       email = request.form['email']
       fecha = request.form['fecha']
       hora = request.form['hora']

       row = row
   #row = ["jaime","retamal"]
   #data = edit_function(user)
   return render_template('/editUser.html', row=row)



@app.errorhandler(404)
def page_not_found(error):
    return render_template("Error404.html"), 404


@app.route("/toolbar", methods=["GET"])
def DEB_EX():
    return render_template("toolbar_key.html")

@app.route('/index.html')
def home():
    return render_template('/index.html')

@app.route('/portalPago.html')
def portal():
    return render_template('/portalPago.html')


@app.route('/dashboard.html')
def dashboard():
    return render_template('/dashboard.html')

@app.route('/modulo_cotizador.html')
def modulo_cotizador():
    return render_template('/modulo_cotizador.html')


cursor = connection.cursor()


@app.route('/modulo_cotizador.html', methods=["POST"])
def carga():
    
    if request.method == "POST":

        #VARIABLES
        fecha = date.today()
        fechaHora = datetime.now()
        time = fechaHora.strftime("%H:%M:%S")
        nombre = 'Cotizacion_2024'
        
        file = request.files["archivo"]
        print(file)
        filename = secure_filename(file.filename)
        print(filename)
        if file and allowed_file(filename):
            print('permitido')
            file.save(os.path.join(app.config["UPLOAD_FOLDER"],filename))
        
        execute = """
            INSERT INTO ARCHIVO_COTIZADOR (nombre,fecha,hora,archivo)
            VALUES (:nombre,:fecha,:time,:filename)
        """ 
        cursor.execute(execute, {'nombre':nombre,'fecha':fecha,'time':time,'filename':filename})

        connection.commit() 

    return render_template('/index.html'),200



@app.route('/crud_cotizador.html')
def cotizador():   
    for row in cursor.execute("select * from CRUD_ARCHIVO_COTIZACION"):
        
    #row = cursor.execute("select * from CRUD_ARCHIVO_COTIZACION")
        #row = cursor.fetchall()
    #row = cursor.fetchall()
       
        return render_template('/crud_cotizador.html', campos=row), 200


    
@app.route('/portalPago.html', methods=['POST'])
def pago():

    fecha = date.today()
    fechaHora = datetime.now()
    time = fechaHora.strftime("%H:%M:%S")

    if request.method == 'POST':

        nombre = request.form['nombre']
        apellido = request.form['apellido']
        usuario = request.form['usuario']
        email = request.form['email']
        direccion = request.form['direccion']
        telefono = request.form['telefono']
        pais = request.form['pais']
        estado = request.form['estado']
        codigo = request.form['codigo']    
        metodo = request.form['paymentMethod'] 
        numeroTarjeta = request.form['numeroTarjeta']   
        nombreTarjeta = request.form['nombreTarjeta']
        expiracion = request.form['expiracion']
        cvv = request.form['cvv']
        #cursor.execute("INSERT INTO DATOS_FACTURA (usuario,email,direccion,telefono,fecha,hora,nombre,apellido) VALUES ('jaime','jaimeretamal@gmail.com','joaquin palacios 556','990383265','14/07/24','15:30','USER_BOSS_100','USER_BOSS_100')")
        execute = """
        INSERT INTO DATOS_FACTURA (usuario,email,direccion,telefono,fecha,hora,nombre,apellido,pais,estado,codigo,metodo,numeroTarjeta,nombreTarjeta,expiracion,cvv) 
        VALUES (:usuario,:email,:direccion,:telefono,:fecha,:time,:nombre,:apellido,:pais,:estado,:codigo,:metodo,:numeroTarjeta,:nombreTarjeta,:expiracion,:cvv)
        """ 
        cursor.execute(execute, {'usuario':usuario,'email':email,'direccion':direccion,'telefono':telefono,'fecha':fecha,'time':time,
                                 'nombre':nombre,'apellido':apellido,'pais':pais,'estado':estado,'codigo':codigo,
                                 'metodo':metodo,'numeroTarjeta':numeroTarjeta,'nombreTarjeta':nombreTarjeta,'expiracion':expiracion,'cvv':cvv})
        connection.commit()  
    else:
        return "404 BAD REQUEST", 400
    
    return render_template('/index.html'),200


@app.route('/login.html', methods=['POST'])
def post_data():

    
    
    
    #VARIABLES
    fecha = date.today()
    fechaHora = datetime.now()
    time = fechaHora.strftime("%H:%M:%S")
   

    if request.method == 'POST':

        nombre = request.form['nombre']
        apellido = request.form['apellido']
        email = request.form['email']
        password_create = request.form['password_create']
        password_confirm = request.form['password_confirm']


        execute = """
        INSERT INTO SIGNUP (EMAIL,CLAVE_NUEVA,CLAVE,FECHA,NOMBRE,APELLIDO,HORA) 
        VALUES (:email,:password_create,:password_confirm,:fecha,:nombre,:apellido,:time)
        """
        
        cursor.execute(execute, {'email':email, 'password_create':password_create, 'password_confirm':password_confirm, 'fecha':fecha, 'nombre':nombre, 'apellido':apellido, 'time':time})
       
        connection.commit()
        
        
    else:
        return 'BAD REQUEST', 400
    
    return render_template('/login.html'), 200




#definimos la ruta de index para el registro de la cuenta creada pero en el login
@app.route('/index.html', methods=["POST"])
def login_registro():

    #VARIABLES
    fecha = date.today()
    fechaHora = datetime.now()
    time = fechaHora.strftime("%H:%M:%S")

    if request.method == "POST":
        email = request.form['email']
        clave = request.form['clave']
       

        execute = """
        INSERT INTO LOGIN (EMAIL,CLAVE,FECHA,HORA) 
        VALUES (:email,:clave,:fecha,:time)
        """
        
        cursor.execute(execute, {'email':email, 'clave':clave,'fecha':fecha,'time':time})
       
        connection.commit()
       
        
        #return render_template('/index.html')
        #return redirect(url_for('/home'))
    else:
        return "404 request", 400
    
    return render_template('/index.html'), 200
    


@app.route('/formulario', methods=['POST'])
def pag_formulario_administrativo():
     #VARIABLES
    fecha = date.today()
    fechaHora = datetime.now()
    time = fechaHora.strftime("%H:%M:%S")


    if request.method == 'POST':

        nombre = request.form['nombre']
        apellido = request.form['apellido']
        tipo_evento = request.form['tipo_evento']
        contacto = request.form['contacto']
        direccion = request.form['direccion']
        email = request.form['email']

        execute = """
        INSERT INTO formulario_administrativo (nombre,apellido,tipo_evento,contacto,direccion,email,fecha,hora) 
        VALUES (:nombre,:apellido,:tipo_evento,:contacto,:direccion,:email,:fecha,:time)
        """

        cursor.execute(execute, {'nombre':nombre,'apellido':apellido,'tipo_evento':tipo_evento,'contacto':contacto,'direccion':direccion,'email':email,'fecha':fecha,'time':time})

        connection.commit()


    else:
        return "404  ERROR REQUEST", 400
     
    return render_template('/index.html') , 200


cursor.execute("SELECT * FROM formulario_administrativo")
data = cursor.fetchall()
print(data)

for row in cursor.execute("select * from formulario_administrativo"):
    print(row)
#connection.commit()

#@app.route('/login.html', methods=['POST'])
#def post_data():
    
    #VARIABLES
#    fecha = date.today()
#    fechaHora = datetime.now()
#    time = fechaHora.strftime("%H:%M:%S")
   

#    if request.method == 'POST':

        
#        nombre = request.form['nombre']
#        apellido = request.form['apellido']
#        email = request.form['email']
#        password_create = request.form['password_create']
#        password_confirm = request.form['password_confirm']


#        execute = """
#        INSERT INTO SIGNUP (EMAIL,CLAVE_NUEVA,CLAVE,FECHA,NOMBRE,APELLIDO,HORA) 
#        VALUES (:email,:password_create,:password_confirm,:fecha,:nombre,:apellido,:time)
#        """
        
#        cursor.execute(execute, {'email':email, 'password_create':password_create, 'password_confirm':password_confirm, 'fecha':fecha, 'nombre':nombre, 'apellido':apellido, 'time':time})
       
#        app_models_oracle.connection.commit()
        
        
#    else:
#        return 'BAD REQUEST', 400
    
#    return render_template('/login.html'), 200

@app.route('/login.html')
def signup():
    
    response = make_response("cookie_app")
    response.set_cookie("cookie_app","cookie")
    cookie_value = request.cookies.get("cookie_app")

    return render_template('/login.html')

def post_data():

def login_registro():

    #VARIABLES
    fecha = date.today()
    fechaHora = datetime.now()
    time = fechaHora.strftime("%H:%M:%S")

    if request.method == "POST":
        email = request.form['email']
        clave = request.form['clave']
       

        execute = """
        INSERT INTO LOGIN (EMAIL,CLAVE,FECHA,HORA) 
        VALUES (:email,:clave,:fecha,:time)
        """
        
        cursor.execute(execute, {'email':email, 'clave':clave,'fecha':fecha,'time':time})
       
        app_models_oracle.connection.commit()
       
        
        #return render_template('/index.html')
        #return redirect(url_for('/home'))
    else:
        return "404 request", 400
    
    return render_template('/index.html'), 200
    
